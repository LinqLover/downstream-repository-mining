# Papers
@inproceedings{chaturvedi13,
	author={Chaturvedi, K.K. and Sing, V.B. and Singh, Prashast},
	booktitle={2013 13th International Conference on Computational Science and Its Applications},
	title={Tools in Mining Software Repositories},
	year={2013},
	volume={},
	number={},
	pages={89-98},
	doi={10.1109/ICCSA.2013.22}
}
@inproceedings{hassan08,
	author={Hassan, Ahmed E.},
	booktitle={2008 Frontiers of Software Maintenance},
	title={The road ahead for Mining Software Repositories},
	year={2008},
	volume={},
	number={},
	pages={48-57},
	doi={10.1109/FOSM.2008.4659248}
}
@article{jung12,
	doi = {10.1587/transinf.e95.d.1384},
	url = {https://doi.org/10.1587/transinf.e95.d.1384},
	year = {2012},
	publisher = {Institute of Electronics,  Information and Communications Engineers ({IEICE})},
	volume = {E95.D},
	number = {5},
	pages = {1384--1406},
	author = {Woosung JUNG and Eunjoo LEE and Chisu WU},
	title = {A Survey on Mining Software Repositories},
	journal = {{IEICE} Transactions on Information and Systems}
}
@inproceedings{mattis20,
	author = {Mattis, Toni and Rein, Patrick and Hirschfeld, Robert},
	title = {Three Trillion Lines: Infrastructure for Mining GitHub in the Classroom},
	year = {2020},
	isbn = {9781450375078},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3397537.3397551},
	doi = {10.1145/3397537.3397551},
	abstract = {The increasing interest in collaborative software development on platforms like GitHub has led to the availability of large amounts of data about development activities. The GHTorrent project has recorded a significant proportion of GitHub’s public event stream and hosts the currently largest public dataset of meta-data about open-source development. We describe our infrastructure that makes this data locally available to researchers and students, examples for research activities carried out on this infrastructure, and what we learned from building the system. We identify a need for domain-specific tools, especially databases, that can deal with large-scale code repositories and associated meta-data and outline open challenges to use them more effectively for research and machine learning settings.},
	booktitle = {Conference Companion of the 4th International Conference on Art, Science, and Engineering of Programming},
	pages = {1–6},
	numpages = {6},
	keywords = {Repository Mining, TravisCI, GitHub, Teaching, Big Code},
	location = {Porto, Portugal},
	series = {<programming> '20}
}
@inproceedings{kikas17,
	author = {Kikas, Riivo and Gousios, Georgios and Dumas, Marlon and Pfahl, Dietmar},
	title = {Structure and Evolution of Package Dependency Networks},
	year = {2017},
	isbn = {9781538615447},
	publisher = {IEEE Press},
	url = {https://doi.org/10.1109/MSR.2017.55},
	doi = {10.1109/MSR.2017.55},
	abstract = {Software developers often include available open-source software packages into their projects to minimize redundant effort. However, adding a package to a project can also introduce risks, which can propagate through multiple levels of dependencies. Currently, not much is known about the structure of open-source package ecosystems of popular programming languages and the extent to which transitive bug propagation is possible. This paper analyzes the dependency network structure and evolution of the JavaScript, Ruby, and Rust ecosystems. The reported results reveal significant differences across language ecosystems. The results indicate that the number of transitive dependencies for JavaScript has grown 60% over the last year, suggesting that developers should look more carefully into their dependencies to understand what exactly is included. The study also reveals that vulnerability to a removal of the most popular package is increasing, yet most other packages have a decreasing impact on vulnerability. The findings of this study can inform the development of dependency management tools.},
	booktitle = {Proceedings of the 14th International Conference on Mining Software Repositories},
	pages = {102–112},
	numpages = {11},
	location = {Buenos Aires, Argentina},
	series = {MSR '17}
}
@inproceedings{zhong09,
	title={MAPO: Mining and Recommending API Usage Patterns},
	author={Hao Zhong and Tao Xie and L. Zhang and J. Pei and Hong Mei},
	booktitle={ECOOP},
	year={2009},
	doi = {10.1007/978-3-642-03013-0_15},
	pages = {319-343}
}
@inproceedings{saied15,
	author={Saied, Mohamed Aymen and Benomar, Omar and Abdeen, Hani and Sahraoui, Houari},
	booktitle={2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	title={Mining Multi-level API Usage Patterns},
	year={2015},
	pages={23-32},
	doi={10.1109/SANER.2015.7081812}
}
@inproceedings{uddin12,
	author={Uddin, Gias and Dagenais, Barthélémy and Robillard, Martin P.},
	booktitle={2012 34th International Conference on Software Engineering (ICSE)},
	title={Temporal analysis of API usage concepts},
	year={2012},
	pages={804-814},
	doi={10.1109/ICSE.2012.6227138}
}
@inproceedings{amann19,
	author = {Amann, Sven and Nguyen, Hoan Anh and Nadi, Sarah and Nguyen, Tien N. and Mezini, Mira},
	title = {Investigating next Steps in Static API-Misuse Detection},
	year = {2019},
	publisher = {IEEE Press},
	url = {https://doi.org/10.1109/MSR.2019.00053},
	doi = {10.1109/MSR.2019.00053},
	abstract = {Application Programming Interfaces (APIs) often impose constraints such as call order or preconditions. API misuses, i.e., usages violating these constraints, may cause software crashes, data-loss, and vulnerabilities. Researchers developed several approaches to detect API misuses, typically still resulting in low recall and precision. In this work, we investigate ways to improve API-misuse detection. We design MuDetect, an API-misuse detector that builds on the strengths of existing detectors and tries to mitigate their weaknesses. MuDetect uses a new graph representation of API usages that captures different types of API misuses and a systematically designed ranking strategy that effectively improves precision. Evaluation shows that MuDetect identifies real-world API misuses with twice the recall of previous detectors and 2.5x higher precision. It even achieves almost 4x higher precision and recall, when mining patterns across projects, rather than from only the target project.},
	booktitle = {Proceedings of the 16th International Conference on Mining Software Repositories},
	pages = {265–275},
	numpages = {11},
	location = {Montreal, Quebec, Canada},
	series = {MSR '19}
}
@inproceedings{osman14,
	author={Osman, Haidar and Lungu, Mircea and Nierstrasz, Oscar},
	booktitle={2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE)},
	title={Mining frequent bug-fix code changes},
	year={2014},
	pages={343-347},
	doi={10.1109/CSMR-WCRE.2014.6747191}
}
@inproceedings{collard13,
	author = {Collard, Michael L. and Decker, Michael John and Maletic, Jonathan I.},
	title = {SrcML: An Infrastructure for the Exploration, Analysis, and Manipulation of Source Code: A Tool Demonstration},
	year = {2013},
	isbn = {9780769549811},
	publisher = {IEEE Computer Society},
	address = {USA},
	url = {https://doi.org/10.1109/ICSM.2013.85},
	doi = {10.1109/ICSM.2013.85},
	abstract = {SrcML is an XML representation for C/C++/Java source code that forms a platform for the efficient exploration, analysis, and manipulation of large software projects. The lightweight format allows for round-trip transformation from source to srcML and back to source with no loss of information or formatting. The srcML toolkit consists of the src2srcml tool for robust translation to the srcML format and the srcml2src tool for querying via XPath, and transformation via XSLT. In this demonstration a guide of these features is provided along with the use of XPath for constructing source-code queries and XSLT for conducting simple transformations.},
	booktitle = {Proceedings of the 2013 IEEE International Conference on Software Maintenance},
	pages = {516–519},
	numpages = {4},
	keywords = {source transformation, srcML, static code analysis},
	series = {ICSM '13}
}
@misc{bogar18,
	title={Lightweight Call-Graph Construction for Multilingual Software Analysis}, 
	author={Anne Marie Bogar and Damian M. Lyons and David Baird},
	year={2018},
	eprint={1808.01213},
	archivePrefix={arXiv},
	primaryClass={cs.SE}
}
@inproceedings{gharibi18,
	author = {Gharibi, Gharib and Tripathi, Rashmi and Lee, Yugyung},
	title = {Code2graph: Automatic Generation of Static Call Graphs for Python Source Code},
	year = {2018},
	isbn = {9781450359375},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3238147.3240484},
	doi = {10.1145/3238147.3240484},
	abstract = {A static call graph is an imperative prerequisite used in most interprocedural analyses and software comprehension tools. However, there is a lack of software tools that can automatically analyze the Python source-code and construct its static call graph. In this paper, we introduce a prototype Python tool, named code2graph, which automates the tasks of (1) analyzing the Python source-code and extracting its structure, (2) constructing static call graphs from the source code, and (3) generating a similarity matrix of all possible execution paths in the system. Our goal is twofold: First, assist the developers in understanding the overall structure of the system. Second, provide a stepping stone for further research that can utilize the tool in software searching and similarity detection applications. For example, clustering the execution paths into a logical workflow of the system would be applied to automate specific software tasks. Code2graph has been successfully used to generate static call graphs and similarity matrices of the paths for three popular open-source Deep Learning projects (TensorFlow, Keras, PyTorch). A tool demo is available at https://youtu.be/ecctePpcAKU.},
	booktitle = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
	pages = {880–883},
	numpages = {4},
	keywords = {Static code analysis, call graph construction, Python},
	location = {Montpellier, France},
	series = {ASE 2018}
}
@misc{salis21,
	title={PyCG: Practical Call Graph Generation in Python}, 
	author={Vitalis Salis and Thodoris Sotiropoulos and Panos Louridas and Diomidis Spinellis and Dimitris Mitropoulos},
	year={2021},
	eprint={2103.00587},
	archivePrefix={arXiv},
	primaryClass={cs.PL}
}
@inproceedings{antal18,
	author={Antal, Gábor and Hegedus, Péter and Tóth, Zoltán and Ferenc, Rudolf and Gyimóthy, Tibor},
	booktitle={2018 IEEE 18th International Working Conference on Source Code Analysis and Manipulation (SCAM)},
	title={[Research Paper] Static JavaScript Call Graphs: A Comparative Study},
	year={2018},
	pages={177-186},
	doi={10.1109/SCAM.2018.00028}
}
@inproceedings{hejderup18,
	author = {Hejderup, Joseph and van Deursen, Arie and Gousios, Georgios},
	title = {Software Ecosystem Call Graph for Dependency Management},
	year = {2018},
	isbn = {9781450356626},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3183399.3183417},
	doi = {10.1145/3183399.3183417},
	abstract = {A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven or npm. Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and the leftpad package removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application.},
	booktitle = {Proceedings of the 40th International Conference on Software Engineering: New Ideas and Emerging Results},
	pages = {101–104},
	numpages = {4},
	location = {Gothenburg, Sweden},
	series = {ICSE-NIER '18}
}
@inproceedings{wang20,
	author={Wang, Ying and Chen, Bihuan and Huang, Kaifeng and Shi, Bowen and Xu, Congying and Peng, Xin and Wu, Yijian and Liu, Yang},
	booktitle={2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
	title={An Empirical Study of Usages, Updates and Risks of Third-Party Libraries in Java Projects},
	year={2020},
	pages={35-45},
	doi={10.1109/ICSME46990.2020.00014}
}
@misc{hejderup21,
	title={Pr\"azi: From Package-based to Call-based Dependency Networks}, 
	author={Joseph Hejderup and Moritz Beller and Konstantinos Triantafyllou and Georgios Gousios},
	year={2021},
	eprint={2101.09563},
	archivePrefix={arXiv},
	primaryClass={cs.SE}
}
@misc{keshani21,
    title={Scalable Call Graph Constructor for Maven},
    author={Mehdi Keshani},
    year={2021},
    eprint={2103.15162},
    archivePrefix={arXiv},
    primaryClass={cs.SE}
}
@inproceedings{beller17,
	author={Beller, Moritz and Gousios, Georgios and Zaidman, Andy},
	booktitle={2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)},
	title={TravisTorrent: Synthesizing Travis CI and GitHub for Full-Stack Research on Continuous Integration},
	year={2017},
	pages={447-450},
	doi={10.1109/MSR.2017.24}
}
@inproceedings{tomassi19,
	author={Tomassi, David A. and Dmeiri, Naji and Wang, Yichen and Bhowmick, Antara and Liu, Yen-Chuan and Devanbu, Premkumar T. and Vasilescu, Bogdan and Rubio-González, Cindy},
	booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
	title={BugSwarm: Mining and Continuously Growing a Dataset of Reproducible Failures and Fixes},
	year={2019},
	pages={339-349},
	doi={10.1109/ICSE.2019.00048}
}
@inproceedings{silva19,
	author={Silva, Léuson},
	booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)},
	title={Detecting, Understanding and Resolving Build and Test Conflicts},
	year={2019},
	pages={192-193},
	doi={10.1109/ICSE-Companion.2019.00079}
}

# Websites
@online{githubrest,
	url = {https://docs.github.com/en/rest},
	urldate = {2021-04-20},
	title = {GitHub REST API},
	author = {GitHub},
	booktitle = {GitHub Docs}
}
@online{githubgql,
	url = {https://docs.github.com/en/graphql},
	urldate = {2021-04-20},
	title = {GitHub GraphQL API},
	author = {GitHub},
	booktitle = {GitHub Docs}
}
@inproceedings{gousi13,
	author = {Gousios, Georgios},
	title = {The GHTorrent dataset and tool suite},
	booktitle = {Proceedings of the 10th Working Conference on Mining Software
		Repositories},
	series = {MSR '13},
	year = {2013},
	isbn = {978-1-4673-2936-1},
	location = {San Francisco, CA, USA},
	pages = {233--236},
	numpages = {4},
	url = {http://dl.acm.org/citation.cfm?id=2487085.2487132},
	acmid = {2487132},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
}
@inproceedings{gousi14,
	author = {Gousios, Georgios and Vasilescu, Bogdan and Serebrenik, Alexander and Zaidman, Andy},
	title = {Lean GHTorrent: GitHub Data on Demand},
	year = {2014},
	isbn = {9781450328630},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2597073.2597126},
	doi = {10.1145/2597073.2597126},
	abstract = { In recent years, GitHub has become the largest code host in the world, with more than 5M developers collaborating across 10M repositories. Numerous popular open source projects (such as Ruby on Rails, Homebrew, Bootstrap, Django or jQuery) have chosen GitHub as their host and have migrated their code base to it. GitHub offers a tremendous research potential. For instance, it is a flagship for current open source development, a place for developers to showcase their expertise to peers or potential recruiters, and the platform where social coding features or pull requests emerged. However, GitHub data is, to date, largely underexplored. To facilitate studies of GitHub, we have created GHTorrent, a scalable, queriable, offline mirror of the data offered through the GitHub REST API. In this paper we present a novel feature of GHTorrent designed to offer customisable data dumps on demand. The new GHTorrent data-on-demand service offers users the possibility to request via a web form up-to-date GHTorrent data dumps for any collection of GitHub repositories. We hope that by offering customisable GHTorrent data dumps we will not only lower the "barrier for entry" even further for researchers interested in mining GitHub data (thus encourage researchers to intensify their mining efforts), but also enhance the replicability of GitHub studies (since a snapshot of the data on which the results were obtained can now easily accompany each study). },
	booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
	pages = {384–387},
	numpages = {4},
	keywords = {data on demand, GitHub, dataset},
	location = {Hyderabad, India},
	series = {MSR 2014}
}
@online{librariesio,
	url = {https://libraries.io/},
	urldate = {2021-04-24},
	title = {Libraries.io},
	author = {Nesbitt, Andrew},
	year = {2015}
}
@software{tree-sitter,
  author       = {Max Brunsfeld and
                  Patrick Thomson and
                  Josh Vera and
                  Phil Turnbull and
                  Timothy Clem and
                  Rob Rix and
                  Ika and
                  Andrew Hlynskyi and
                  Tuấn-Anh Nguyễn and
                  Stafford Brunk and
                  Björn Linse and
                  ikrima and
                  Steven Kalt and
                  Mark Schmitz and
                  Matthew Krupcale and
                  Vicent Martí and
                  Darin Morrison and
                  George Fraser and
                  BonaBeavis and
                  Douglas Creager and
                  François Wouts and
                  Greg Price and
                  Rob Donnelly and
                  Santos Gallegos and
                  Marcelo Lopes Lotufo and
                  PBug and
                  Arthur Baars and
                  Axel Hecht and
                  Eli Schwartz and
                  Ervin Oro},
  title        = {tree-sitter/tree-sitter: v0.19.4},
  month        = mar,
  year         = 2021,
  publisher    = {Zenodo},
  version      = {v0.19.4},
  doi          = {10.5281/zenodo.4619184},
  url          = {https://doi.org/10.5281/zenodo.4619184}
}
@online{nektos/act,
	url = {https://github.com/nektos/act},
	urldate = {2021-04-20},
	title = {nektos/act},
	author = {Casey Lee}
}
@online{vscodeapi,
	title = {VS Code API},
	url = {https://code.visualstudio.com/api/references/vscode-api},
	urldate = {2021-04-20},
	author = {Microsoft}
}

# Datasets
@online{modct,
	title = {Module Counts},
	author = {Erik DeBill},
	url = {http://www.modulecounts.com/},
	urldate = {2021-04-20}
}
@online{githut,
	title = "GitHut: Github Language Stats",
	author = {Fabian Beuke},
	url = {https://madnight.github.io/githut},
	urldate = {2021-04-20}
}
